package com.focustech.oss2008.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import org.acegisecurity.GrantedAuthority;
import org.acegisecurity.GrantedAuthorityImpl;
import org.acegisecurity.userdetails.UserDetails;
import org.apache.commons.lang.StringUtils;

import com.focustech.oss2008.Constants;
import com.focustech.oss2008.FieldConstants;
import com.focustech.oss2008.annotation.Display;

/**
 * OssAdminUsers generated by MyEclipse Persistence Tools
 */
public class OssAdminUser implements java.io.Serializable, UserDetails {
    private static final long serialVersionUID = -6791743330374455991L;
    public static final String USER_ENABLED = "1";// 用戶可用
    public static final String USER_DISABLED = "0";// 用戶被禁用
    /** 動態密碼使用狀態︰啟用 */
    public static final String DYN_PASSWORD_ENABLE = "1";
    /** 動態密碼使用狀態︰禁用 */
    public static final String DYN_PASSWORD_DISABLED = "0";
    // Fields
    private String userId;
    private OssAdminDepartment ossAdminDepartment;
    private String workerId;
    @Display(FieldConstants.USER_GENDER_FIELD)
    private String gender;
    @Display(FieldConstants.USER_FULLNAME_FIELD)
    private String fullname;
    private String agname;
    @Display(FieldConstants.USER_NAME_FIELD)
    private String loginName;
    @Display(FieldConstants.USER_PASSWORD_FIELD)
    private String password;
    @Display(FieldConstants.USER_EMAIL_FIELD)
    private String email;
    private String extension;
    private String mobileTelephone;
    private String ldapUserId;
    @Display(FieldConstants.USER_ACTIVE_FIELD)
    private String active;
    private String description;
    private String creatorId;
    private Date createdTime;
    private String modifierId;
    private Date modifiedTime;
    private String dynPasswordFlag = "1";
    private Set<OssAdminRole> roles;
    private OssAdminLoginControl loginControl;

    /*
     * (non-Javadoc)
     * @see org.acegisecurity.userdetails.UserDetails#getAuthorities()
     */
    public GrantedAuthority[] getAuthorities() {
        // 目前,在權限系統中,只取第一個第一個角色
        if (roles == null || roles.size() == 0)
            return null;
        // GrantedAuthority[] authors = new GrantedAuthority[roles == null ? 0 : roles.size()];
        // int index = 0;
        // for (OssAdminRole role : roles)
        // {
        // authors[index] = new GrantedAuthorityImpl(role.getRoleName());
        // }
        GrantedAuthority[] authors = new GrantedAuthority[1];
        for (OssAdminRole role : roles) {
            authors[0] = new GrantedAuthorityImpl(role.getRoleName());
            break;
        }
        return authors;
    }

    /**
     * 取得當前用戶權限的Set集合
     */
    public Set<String> getAuthoritySet() {
        if (roles == null)
            return null;
        Set<String> authorSet = new HashSet<String>();
        for (OssAdminRole role : roles) {
            authorSet.add(role.getRoleName());
        }
        return authorSet;
    }

    /**
     * 在後台定義的登錄名與ldap登錄名中取不為空的一個
     */
    public String getUsername() {
        return StringUtils.isEmpty(loginName) ? ldapUserId : loginName;
    }

    public void setUserName(String loginName){
    	this.loginName = loginName;
    }

    public boolean isAccountNonExpired() {
        return Constants.LOGIC_TRUE.equals(active) ? true : false;
    }

    public boolean isAccountNonLocked() {
        return isAccountNonExpired();
    }

    public boolean isCredentialsNonExpired() {
        return isAccountNonExpired();
    }

    public boolean isEnabled() {
        return isAccountNonExpired();
    }

    // Property accessors
    public String getUserId() {
        return this.userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getWorkerId() {
        return this.workerId;
    }

    public void setWorkerId(String workerId) {
        this.workerId = workerId;
    }

    public String getGender() {
        return this.gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getFullname() {
        return this.fullname;
    }

    public void setFullname(String fullname) {
        this.fullname = fullname;
    }

    public String getAgname() {
        return this.agname;
    }

    public void setAgname(String agname) {
        this.agname = agname;
    }

    public String getLoginName() {
        return this.loginName;
    }

    public void setLoginName(String loginName) {
        this.loginName = loginName;
    }

    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getLdapUserId() {
        return this.ldapUserId;
    }

    public void setLdapUserId(String ldapUserId) {
        this.ldapUserId = ldapUserId;
    }

    public String getActive() {
        return this.active;
    }

    public void setActive(String active) {
        this.active = active;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Date getCreatedTime() {
        return this.createdTime;
    }

    public void setCreatedTime(Date createdTime) {
        this.createdTime = createdTime;
    }

    public Set<OssAdminRole> getRoles() {
        return roles;
    }

    public long getUserFirstRole() {
        if (roles != null) {
            for (OssAdminRole role : roles) {
                return role.getRoleId();
            }
        }
        return -1;
    }

    public void setRoles(Set<OssAdminRole> roles) {
        this.roles = roles;
    }

    public String getExtension() {
        return extension;
    }

    public void setExtension(String extension) {
        this.extension = extension;
    }

    public String getMobileTelephone() {
        return mobileTelephone;
    }

    public void setMobileTelephone(String mobileTelephone) {
        this.mobileTelephone = mobileTelephone;
    }

    public String getCreatorId() {
        return creatorId;
    }

    public void setCreatorId(String creatorId) {
        this.creatorId = creatorId;
    }

    public String getModifierId() {
        return modifierId;
    }

    public void setModifierId(String modifierId) {
        this.modifierId = modifierId;
    }

    public Date getModifiedTime() {
        return modifiedTime;
    }

    public void setModifiedTime(Date modifiedTime) {
        this.modifiedTime = modifiedTime;
    }

    public OssAdminDepartment getOssAdminDepartment() {
        return ossAdminDepartment;
    }

    public void setOssAdminDepartment(OssAdminDepartment ossAdminDepartment) {
        this.ossAdminDepartment = ossAdminDepartment;
    }

    public OssAdminLoginControl getLoginControl() {
        return loginControl;
    }

    public void setLoginControl(OssAdminLoginControl loginControl) {
        this.loginControl = loginControl;
    }

    /**
     * 判斷當前用戶是否使用LDAP登錄認證。目前認為當用戶的ldapUserId不為空且和登錄名相等時，使用LDAP登錄認證。
     *
     * @return true:使用LDAP登錄認證；false:不使用LDAP登錄認證
     */
    public boolean isLdapUser() {
        return StringUtils.isNotEmpty(ldapUserId) && ldapUserId.equals(loginName);
    }

    public void setDynPasswordFlag(String dynPasswordFlag) {
        this.dynPasswordFlag = dynPasswordFlag;
    }

    public String getDynPasswordFlag() {
        return dynPasswordFlag;
    }
}
